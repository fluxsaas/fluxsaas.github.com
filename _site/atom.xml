<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://tom.preston-werner.com/atom.xml" rel="self"/>
 <link href="http://tom.preston-werner.com/"/>
 <updated>2009-08-17T20:44:41+02:00</updated>
 <id>http://tom.preston-werner.com/</id>
 <author>
   <name>Tom Preston-Werner</name>
   <email>tom@mojombo.com</email>
 </author>

 
 <entry>
   <title>Flex for Rails, how to collection</title>
   <link href="http://tom.preston-werner.com/2009/08/17/flex-for-rails-how-to-collection.html"/>
   <updated>2009-08-17T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2009/08/17/flex-for-rails-how-to-collection</id>
   <content type="html">&lt;p class=&quot;time-stamp&quot;&gt;17 &lt;span class=&quot;caps&quot;&gt;AUGUST&lt;/span&gt; 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/08/17/flex-for-rails-how-to-collection.html&quot;&gt;Flex for Rails, how to collection&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;Call JavaScript Function within FLex Applications&lt;/h2&gt;
&lt;p&gt;A Simple way to call an JavaScript Function is to import the &lt;code&gt;ExternalInterface&lt;/code&gt;  ( &lt;a href=&quot;http://livedocs.adobe.com/flex/3/langref/flash/external/ExternalInterface.html&quot;&gt;liveDoc&lt;/a&gt; )&lt;br /&gt;
and call the javaScript function&lt;/p&gt;

&lt;pre class=&quot;brush: as3;&quot;&gt;
  &amp;lt;mx:Script&amp;gt;
    &amp;lt;![CDATA[
      import flash.external.*;

      public function debug(message:String) : void{       
        if (ExternalInterface.available) {
          ExternalInterface.call('console.log', message);
        }
      }
    ]]&amp;gt;
  &amp;lt;/mx:Script&amp;gt;
&lt;/pre&gt;
&lt;h2&gt;Basic &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; requests from Flex to Rails&lt;/h2&gt;
&lt;p&gt;Call the Fuction &lt;code&gt;listCompositions()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: as3;&quot;&gt;
  import mx.rpc.events.ResultEvent;
	
	public function listCompositions():void{				
		svcCompositionsList.send();
	}
	
	private function handleCompositionsListResult(event:ResultEvent):void{
		debug( event.result.toString() );				
		var resultXML:XML = XML(event.result);
	}
&lt;/pre&gt;

&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;mx:HTTPService id=&quot;svcCompositionsList&quot; 
      url=&quot;/editorial/compositions.xml&quot; 
      resultFormat=&quot;e4x&quot; 
      result=&quot;handleCompositionsListResult(event)&quot; /&amp;gt;

  &amp;lt;mx:XMLListCollection id=&quot;collectionsXLC&quot; 
    source=&quot;{ XMLList( svcCompositionsList.lastResult.children() ) }&quot; /&amp;gt;

  &amp;lt;mx:DataGrid width=&quot;100%&quot; dataProvider=&quot;{collectionsXLC}&quot; &amp;gt;
      &amp;lt;mx:columns&amp;gt;
          &amp;lt;mx:DataGridColumn dataField=&quot;name&quot; headerText=&quot;Name&quot;/&amp;gt;
      &amp;lt;/mx:columns&amp;gt;
  &amp;lt;/mx:DataGrid&amp;gt;
&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Google Gears Experiment</title>
   <link href="http://tom.preston-werner.com/2009/08/14/google-gears-experiment.html"/>
   <updated>2009-08-14T00:00:00+02:00</updated>
   <id>http://tom.preston-werner.com/2009/08/14/google-gears-experiment</id>
   <content type="html">&lt;p class=&quot;time-stamp&quot;&gt;14 &lt;span class=&quot;caps&quot;&gt;AUGUST&lt;/span&gt; 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/08/14/google-gears-experiment.html&quot;&gt;Google Gears Experiment&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;The Result can be found &lt;em&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/&quot;&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/h2&gt;
&lt;p&gt;You need to install &lt;a href=&quot;http://gears.google.com/&quot;&gt;Google-Gears&lt;/a&gt;. to use this software.&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;h3&gt;File Structure:&lt;/h3&gt;
&lt;ul class=&quot;folders&quot;&gt;
&lt;li&gt;
&lt;a href=&quot;http://kallesaas.com/google-gears/&quot; &gt;google-gears&lt;/a&gt;
&lt;ul class=&quot;folders&quot;&gt;
&lt;ul class=&quot;files&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/index.html.txt&quot; &gt;index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/stylesheets&quot; &gt;stylesheets&lt;/a&gt;&lt;/li&gt;
&lt;ul class=&quot;files&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/stylesheets/default.css&quot;&gt;default.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts&quot; &gt;javascripts&lt;/a&gt;&lt;/li&gt;
&lt;ul class=&quot;files&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/application.js&quot;&gt;application.js&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/gears_init.js&quot;&gt;gears_init.js&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/vocabulary_creator.js&quot;&gt;vocabulary_creator.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Code&lt;/h2&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can find the full code of the &lt;code&gt;index.html&lt;/code&gt; file &lt;a href=&quot;http://kallesaas.com/google-gears/index.html.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Important the correct javascript files:&lt;/p&gt;
&lt;pre class=&quot;brush: html;&quot;&gt;
  ...
  &amp;lt;head&amp;gt;
      &amp;lt;script src=&quot;http://www.google.com/jsapi&quot;&amp;gt;&amp;lt;/script&amp;gt;

      &amp;lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;
        google.load(&quot;jquery&quot;, &quot;1&quot;);
      &amp;lt;/script&amp;gt;

      &amp;lt;script src=&quot;javascripts/gears_init.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&quot;javascripts/vocabulary_creator.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&quot;javascripts/application.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
      ...
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    ...
&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;m using the &lt;a href=&quot;http://code.google.com/intl/de-DE/apis/ajaxlibs/&quot;&gt;Google &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; Libraries &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; to import the JQuery Library.&lt;/p&gt;
&lt;p&gt;You can download the &lt;code&gt;gears_init.js&lt;/code&gt; &lt;a href=&quot;http://code.google.com/apis/gears/tools.html#gears_init&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Javascript&lt;/h3&gt;
&lt;p&gt;You can find the Javascript code &lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/vocabulary_creator.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, lets get started!&lt;/p&gt;
&lt;p&gt;First, we create a Namespace and a Singleton that holds our Javascript code:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  if (!window.GG) {
    var GG = { };
  }

  GG.VocabularyCreator = (function () { 
    return {
      init: function () {
      }
    };
  })();  
&lt;/pre&gt;
&lt;p&gt;Now we can add some functionality.&lt;/p&gt;
&lt;p&gt;But wait, what do we actually need ?&lt;/p&gt;
&lt;p&gt;We want to:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add word&amp;#8217;s and theire translation to a list.&lt;/li&gt;
	&lt;li&gt;Display the List.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, thats sounds not so complicated.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a look at the &lt;a href=&quot;http://code.google.com/intl/de-DE/apis/gears/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; for the &lt;a href=&quot;http://code.google.com/intl/de-DE/apis/gears/api_database.html&quot;&gt;Database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first example shows a bunch of JavaScript code:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  &amp;lt;script type=&quot;text/javascript&quot; src=&quot;gears_init.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
  var db = google.gears.factory.create('beta.database');
  db.open('database-test');
  db.execute('create table if not exists Test' +
             ' (Phrase text, Timestamp int)');
  db.execute('insert into Test values (?, ?)', ['Monkey!', new Date().getTime()]);
  var rs = db.execute('select * from Test order by Timestamp desc');

  while (rs.isValidRow()) {
    alert(rs.field(0) + '@' + rs.field(1));
    rs.next();
  }
  rs.close();
  &amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;With this code we can:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instantiate the Gears objects: ( see: http://tinyurl.com/nvdhuh )&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  var db = google.gears.factory.create(&amp;#8216;beta.database&amp;#8217;);&lt;br /&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open the Database to read and write:&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  db.open(&amp;#8216;database-test&amp;#8217;);&lt;br /&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Execute &lt;em&gt;SQLite&lt;/em&gt;:&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  // Create a SQLite table:&lt;br /&gt;
  db.execute(&amp;#8216;create table if not exists Test&amp;#8217; +&lt;br /&gt;
             &amp;#8217; (Phrase text, Timestamp int)&amp;#8217;);&lt;/p&gt;
// Insert a value to the table:
db.execute(&amp;#8216;insert into Test values (?, ?)&amp;#8217;, [&amp;#8216;Monkey!&amp;#8217;, new Date().getTime()]);
&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read the content of the table:&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  // Execute SQLite&lt;br /&gt;
  var rs = db.execute(&amp;#8216;select * from Test order by Timestamp desc&amp;#8217;);&lt;/p&gt;
// loop over each row:
while (rs.isValidRow()) {
alert(rs.field(0) + &amp;#8216;@&amp;#8217; + rs.field(1));
rs.next();
}

// close the database connection:
rs.close();
&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s almost all we need for our small app.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s implement those basics in our app.&lt;/p&gt;
&lt;p&gt;We call the private &lt;code&gt;_initDatabase&lt;/code&gt; function inside the &lt;code&gt;init()&lt;/code&gt; function &lt;br /&gt;
to setup the Database:&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;init()&lt;/code&gt; function.&lt;/h3&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  // init function:
  return {
    init: function () {
      _initDatabase();
    }
  };
&lt;/pre&gt;
&lt;h3&gt;The &lt;code&gt;_initDatabase()&lt;/code&gt; function.&lt;/h3&gt;
&lt;p&gt;More explanation can be found within the code:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
    ...
    
    // set class variable's:
    var db;
    var databaseIsCreated = false;
    
    var _initDatabase = function () {
      
      // Check if Gears is installed.
      if (window.google &amp;amp;&amp;amp; google.gears) {
        try {

          // Instantiate Gears objects.
          db = google.gears.factory.create('beta.database');

          // check if the Database is available
          if (db) {
            
            // open a database, see: http://tinyurl.com/l8z4gw
            db.open('Translations');
            
            // Create the Table: EnglishGerman.
            db.execute('create table if not exists EnglishGerman' + 
                          ' (English varchar(255), German varchar(255), Timestamp int)');

            databaseIsCreated = true;

            // Initialize the UI at startup.
            _displayTranslations();
          }

        } catch (ex) {
          console.log('Could not create database: ' + ex.message);
        }
      }
    };
    ...
  })();
&lt;/pre&gt;
&lt;p&gt;The structure of the table looks like:&lt;/p&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;span class=&quot;caps&quot;&gt;NAME&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; English &lt;/td&gt;
		&lt;td&gt; German &lt;/td&gt;
		&lt;td&gt; Timestamp &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;span class=&quot;caps&quot;&gt;TYPE&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; varchar(255) &lt;/td&gt;
		&lt;td&gt; varchar(255) &lt;/td&gt;
		&lt;td&gt; date &lt;/td&gt;
&lt;/table&gt;
&lt;p&gt;Now we have a full featured Gears Database in our hands, Horay!&lt;/p&gt;
&lt;p&gt;We can continue with adding content to the SQLLite Table. We do this by &lt;br /&gt;
observing (i use &lt;a href=&quot;http://jquery.com/&quot;&gt;JQuery&lt;/a&gt; ) the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; Form and add the value&amp;#8217;s of &lt;br /&gt;
the input field&amp;#8217;s to the database:&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;_addObserver()&lt;/code&gt; function.&lt;/h3&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  ...
  var _addObserver = function () {
    
    // Adding the Form Observer
    $('#addVocabularyForm').submit(function (event) {
      var $this = $(this);

      // Read the values of the input fields:
      var german = $this.find('#german').val();
      var english = $this.find('#english').val();
      
      try {
        // Insert the new item.
        var res = db.execute('insert into EnglishGerman values (?, ?, ?)', 
              [english, german, new Date().getTime() ] );

        // if the insertion was successfully, we can also add the entry to the HTML.
        if (res) {
          _addVocabularyToHtml(english, german);
        }
      } catch (exaption) {
        console.log('could not insert entry:' + exaption);
      }

      // Prevent the default action.
      event.preventDefault();
    })
  };
  ...
&lt;/pre&gt;
&lt;p&gt;There is not much more to do. You can have a look at the &lt;code&gt;_addVocabularyToHtml&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  var Translations = function (english, german) {
    $('#vocabularys tbody').prepend(
      $('&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;' + english + '&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;' + german + '&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;')
    )    
  };
&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a really simple experiment for Gears. There are by far more complex possibility&amp;#8217;s to&lt;br /&gt;
use Google Gears. The best thing is to read the &lt;a href=&quot;http://code.google.com/apis/gears/design.html&quot;&gt;introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unfortunately Apple&amp;#8217;s Iphone does not support Gears. (Apple does not allow third party plugins for the safari browser)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading !&lt;/p&gt;</content>
 </entry>
 
 
</feed>