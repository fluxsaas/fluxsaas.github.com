<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Kalle Saas</title>
 <link href="http://kallesaas.com/atom.xml" rel="self"/>
 <link href="http://kallesaas.com/"/>
 <updated>2009-09-24T10:40:45+02:00</updated>
 <id>http://kallesaas.com/</id>
 <author>
   <name>Kalle Saas</name>
   <email>kalle@dynamicdudes.com</email>
 </author>

 
 <entry>
   <title>Subdomains or Subfolders which are Better for Blogging (SEO) ?</title>
   <link href="http://kallesaas.com/2009/09/24/subdomains-or-subfolders-which-are-better-for-blogging-seo.html"/>
   <updated>2009-09-24T00:00:00+02:00</updated>
   <id>http://kallesaas.com/2009/09/24/subdomains-or-subfolders-which-are-better-for-blogging-seo</id>
   <content type="html">
&lt;p class=&quot;time-stamp&quot;&gt;24 SEPTEMBER 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/09/24/subdomains-or-subfolders-which-are-better-for-blogging-seo.html&quot;&gt;Subdomains or Subfolders which are Better for Blogging (SEO) ?&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;
  I recently had to decide whether to use a subdomain &lt;code&gt;blog.2manycolours.com&lt;/code&gt; or an subdirectory &lt;code&gt;2manycolours.com/blog&lt;/code&gt;
  for the Wordpress blog of my new project. As i'm not a SEO-Guy i 
  &lt;a href=&quot;http://www.searchenginejournal.com/subdomains-or-subfolders-which-are-better-for-seo/6849/&quot;&gt;read&lt;/a&gt; 
  &lt;a href=&quot;http://www.mattcutts.com/blog/subdomains-and-subdirectories/&quot;&gt;some&lt;/a&gt; 
  &lt;a href=&quot;http://risetothetop.techwyse.com/search-engine-optimization/should-i-use-subdomains-or-subfolders-for-seo-benefit/&quot;&gt;articles&lt;/a&gt; 
  about the issue.
&lt;/p&gt;

&lt;p&gt;
  In conclusion i decided to use a Subfolder because:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search engines view Subdomains as separate sites. Therefore they have the equivalency of separate domains.&lt;/li&gt;
  &lt;li&gt;Sub domains have their own entity&lt;/li&gt;
  &lt;li&gt;With a subfolder, both the inbound and internal linking structure favor the entire site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  But could i just setup 10 Subdomains to get more results listed in the google search ?
&lt;/p&gt;

&lt;p&gt;
  Nope, because:
&lt;/p&gt;

&lt;blockquote&gt;
  Google will show up to two results from each hostname/subdomain of a domain name.
  &lt;br /&gt;
  &lt;small&gt;from &lt;a href=&quot;http://www.mattcutts.com/blog/subdomains-and-subdirectories/&quot;&gt;Matt Cutts: Gadgets, Google, and SEO&lt;/a&gt;&lt;/small&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  Thats not the way it works...
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Keep up with the assets on the production machine - Asset Host in Rails</title>
   <link href="http://kallesaas.com/2009/09/17/rails-asset-host.html"/>
   <updated>2009-09-17T00:00:00+02:00</updated>
   <id>http://kallesaas.com/2009/09/17/rails-asset-host</id>
   <content type="html">&lt;p class=&quot;time-stamp&quot;&gt;17 &lt;span class=&quot;caps&quot;&gt;SEPTEMBER&lt;/span&gt; 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/09/17/rails-asset-host.html&quot;&gt;Keep up with the assets on the production machine &amp;#8211; Asset Host in Rails&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Sometimes you reach a point with a Website where it gets difficult to properly style the site if you don&amp;#8217;t have the right assets on your local machine. The database and the assets are always changing and growing due to user input.&lt;/p&gt;
&lt;p&gt;You could alway download the latest assets, but sometimes there are to big to download or you just don&amp;#8217;t want to keep the assets on your local machine.&lt;/p&gt;
&lt;p&gt;One solution to this problem is to set up an &lt;a href=&quot;http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html&quot;&gt;Asset Host&lt;/a&gt;. You can easily add an Asset Host in the &lt;code&gt;environments/development.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: ruby;&quot;&gt;
    ActionController::Base.asset_host = &quot;assets.example.com&quot;
&lt;/pre&gt;
&lt;p&gt;Every single asset comes from the &lt;code&gt;assets.example.com&lt;/code&gt; host. Thats fine, until you realize that the javascript and css files comes from the host too (Yes, it took me about 15 min to realize why my changes in the css didnt&amp;#8217;t work ;).&lt;/p&gt;
&lt;p&gt;So here is the solution for the problem:&lt;/p&gt;
&lt;pre class=&quot;brush: ruby;&quot;&gt;
ActionController::Base.asset_host = Proc.new { |source|
     if source.starts_with?('/assets')
       &quot;gameone.de&quot;
     else
       &quot;http://localhost:3000&quot;
     end
   }
&lt;/pre&gt;
&lt;p&gt;I put the code in an initializers and ignored it from git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;initializers/config_local_asset_host.rb&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: ruby;&quot;&gt;
  if Rails.env == &quot;development&quot;
    ActionController::Base.asset_host = Proc.new { |source|
         if source.starts_with?('/assets')
           &quot;gameone.de&quot;
         else
           &quot;http://localhost:3000&quot;
         end
       }
  end
&lt;/pre&gt;
&lt;p&gt;Thx to &lt;a href=&quot;http://twitter.com/Soph&quot;&gt;@Soph&lt;/a&gt; to point me in the right direction !&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Web Fonts</title>
   <link href="http://kallesaas.com/2009/08/18/web-fonts.html"/>
   <updated>2009-08-18T00:00:00+02:00</updated>
   <id>http://kallesaas.com/2009/08/18/web-fonts</id>
   <content type="html">&lt;p class=&quot;time-stamp&quot;&gt;18 &lt;span class=&quot;caps&quot;&gt;AUGUST&lt;/span&gt; 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/08/18/web-fonts.html&quot;&gt;Web Fonts&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;We all know about the possibility to include fonts via &lt;code&gt;CSS&lt;/code&gt; in our web site:&lt;/p&gt;
&lt;pre class=&quot;brush: css;&quot;&gt;
  @font-face {
    font-family: &quot;Watusi&quot;;
    src: url(&quot;http://www.example.com/fonts/watusi.ttf&quot;);
    format(&quot;truetype&quot;);
  }

  h1 {
    font-family: &quot;Watusi&quot;, sans-serif;
  }
&lt;/pre&gt;
&lt;p&gt;So, why don&amp;#8217;t we use this technique ?&lt;/p&gt;
&lt;p&gt;There are a few reasons:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;You may be violating&lt;/strong&gt; your End User Licensing Agreement (&lt;span class=&quot;caps&quot;&gt;EULA&lt;/span&gt;) with the font foundry.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;No support&lt;/strong&gt; for this technique in Internet Explorer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is an workaround available for the Internet Explorer by &lt;a href=&quot;http://jontangerine.com/log/2008/10/font-face-in-ie-making-web-fonts-work&quot;&gt;Jon Tan&lt;/a&gt;. And there are Project on the way ( &lt;a href=&quot;http://blog.typekit.com/2009/05/27/introducing-typekit/&quot;&gt;typekit&lt;/a&gt; , &lt;a href=&quot;http://www.typotheque.com/news/typotheque_web_font_service_preview&quot;&gt;Typotheque&lt;/a&gt; ) to handle the license and technology problems for you. It&amp;#8217;s just a matter of time when we can leave &lt;a href=&quot;http://wiki.novemberborn.net/sifr3/&quot;&gt;sIFR&lt;/a&gt; and Image Replacement technique&amp;#8217;s behind us. Horay!&lt;/p&gt;
&lt;p&gt;Read the full featured blog post about this issue by &lt;a href=&quot;http://www.zeldman.com/2009/08/17/web-fonts-and-standards/&quot;&gt;Jeffrey Zeldman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ressources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.zeldman.com/2009/08/17/web-fonts-and-standards/&quot;&gt;Jeffrey Zeldman article about web fonts and standards&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://webfonts.info/wiki/index.php?title=Fonts_available_for_%40font-face_embedding&quot;&gt;List of fonts available for @font-face embedding&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jontangerine.com/log/2008/10/font-face-in-ie-making-web-fonts-work&quot;&gt;making web fonts work in IE&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.typekit.com/2009/05/27/introducing-typekit/&quot;&gt;introducing typekit&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.typotheque.com/news/typotheque_web_font_service_preview&quot;&gt;typotheque web font service preview&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.typotheque.com/webfonts/sample&quot;&gt;Sample by typotheque&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;</content>
 </entry>
 
 <entry>
   <title>Flex for Rails, how to collection</title>
   <link href="http://kallesaas.com/2009/08/17/flex-for-rails-how-to-collection.html"/>
   <updated>2009-08-17T00:00:00+02:00</updated>
   <id>http://kallesaas.com/2009/08/17/flex-for-rails-how-to-collection</id>
   <content type="html">&lt;p class=&quot;time-stamp&quot;&gt;17 &lt;span class=&quot;caps&quot;&gt;AUGUST&lt;/span&gt; 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/08/17/flex-for-rails-how-to-collection.html&quot;&gt;Flex for Rails, how to collection&lt;/a&gt;&lt;/h1&gt;
&lt;p class=&quot;warning&quot;&gt;
This post is work in progress.
&lt;/p&gt;
&lt;h2&gt;Fixing the rails &lt;code&gt;to_xml&lt;/code&gt; Method.&lt;/h2&gt;
&lt;p&gt;If you want to access &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; Object you want to use the correct &lt;strong&gt;E4X&lt;/strong&gt; syntax such &lt;code&gt;rp.currentItem.asset_file_name&lt;/code&gt; and not &lt;code&gt;rp.currentItem['asset_file_name']&lt;/code&gt;. If you debug your Flex code and trace an &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; Object delivered from Rails you will see sth. like this:&lt;/p&gt;
&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;elements type=&quot;array&quot;&amp;gt;
    &amp;lt;element&amp;gt;
      &amp;lt;asset-file-name&amp;gt;oberer-streifen-light-blue.png&amp;lt;/asset-file-name&amp;gt;
      &amp;lt;id type=&quot;integer&quot;&amp;gt;1&amp;lt;/id&amp;gt;
    &amp;lt;/element&amp;gt;
  &amp;lt;/elements&amp;gt;  
&lt;/pre&gt;
&lt;p&gt;Unfortunately you can not access the &lt;code&gt;asset-file-name&lt;/code&gt; with the E4X &lt;code&gt;rp.currentItem.asset-file-name&lt;/code&gt; syntax because Flex try&amp;#8217;s to do a calculation (because of the &amp;#8220;-&amp;#8221;).&lt;/p&gt;
&lt;p&gt;The solution is to fix the &lt;code&gt;to_xml&lt;/code&gt; Method. We can accomplish that by adding a file to  &lt;code&gt;config/initializers&lt;/code&gt; called &lt;code&gt;to_xml_fix.rb&lt;/code&gt;. The content of the file can be found &lt;a href=&quot;/code/to_xml_fix.rb.txt&quot;&gt;here&lt;/a&gt;. What it does is simply overwrite the &lt;code&gt;to_xml&lt;/code&gt; method with the same method but with an additional parameter: &lt;code&gt;to_xml(:dasherize =&amp;gt; false)&lt;/code&gt;. Restart the server and &lt;span class=&quot;caps&quot;&gt;BAM&lt;/span&gt;! It (should!) works just fine!&lt;/p&gt;
&lt;h2&gt;Call JavaScript Function within FLex Applications&lt;/h2&gt;
&lt;p&gt;A Simple way to call an JavaScript Function is to import the &lt;code&gt;ExternalInterface&lt;/code&gt;  ( &lt;a href=&quot;http://livedocs.adobe.com/flex/3/langref/flash/external/ExternalInterface.html&quot;&gt;liveDoc&lt;/a&gt; ) and call the javaScript function&lt;/p&gt;

&lt;pre class=&quot;brush: as3;&quot;&gt;
  &amp;lt;mx:Script&amp;gt;
    &amp;lt;![CDATA[
      import flash.external.*;

      public function debug(message:String) : void{       
        if (ExternalInterface.available) {
          ExternalInterface.call('console.log', message);
        }
      }
    ]]&amp;gt;
  &amp;lt;/mx:Script&amp;gt;
&lt;/pre&gt;
&lt;h2&gt;Basic &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; requests from Flex to Rails&lt;/h2&gt;
&lt;p&gt;Call the Fuction &lt;code&gt;listCompositions()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: as3;&quot;&gt;
  import mx.rpc.events.ResultEvent;
	
	public function listCompositions():void{				
		svcCompositionsList.send();
	}
	
	private function handleCompositionsListResult(event:ResultEvent):void{
		debug( event.result.toString() );				
		var resultXML:XML = XML(event.result);
	}
&lt;/pre&gt;

&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;mx:HTTPService id=&quot;svcCompositionsList&quot; 
      url=&quot;/editorial/compositions.xml&quot; 
      resultFormat=&quot;e4x&quot; 
      result=&quot;handleCompositionsListResult(event)&quot; /&amp;gt;

  &amp;lt;mx:XMLListCollection id=&quot;collectionsXLC&quot; 
    source=&quot;{ XMLList( svcCompositionsList.lastResult.children() ) }&quot; /&amp;gt;

  &amp;lt;mx:DataGrid width=&quot;100%&quot; dataProvider=&quot;{collectionsXLC}&quot; &amp;gt;
      &amp;lt;mx:columns&amp;gt;
          &amp;lt;mx:DataGridColumn dataField=&quot;name&quot; headerText=&quot;Name&quot;/&amp;gt;
      &amp;lt;/mx:columns&amp;gt;
  &amp;lt;/mx:DataGrid&amp;gt;
&lt;/pre&gt;
&lt;h2&gt;Controlling the Cursor&lt;/h2&gt;
&lt;p&gt;Use the &lt;code&gt;buttonMode&lt;/code&gt; to get an &amp;#8220;Hand&amp;#8221; for the cursor.&lt;/p&gt;
&lt;pre class=&quot;brush: as3;&quot;&gt;
  private function onMouseOver(event:MouseEvent):void {
  	currentElement.buttonMode = true;
  }
  private function onMouseOut(event:MouseEvent):void {
  	currentElement.buttonMode = false;
  }
&lt;/pre&gt;
&lt;h2&gt;Custom Events with Components&lt;/h2&gt;
&lt;h3&gt;&lt;code&gt;Dialog.mxml&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;     
  &amp;lt;mx:TitleWindow xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;&amp;gt;

  &amp;lt;mx:Metadata&amp;gt;
    [Event(name=&quot;changeColour&quot;, type=&quot;com.too_many_colours.events.DialogEvent&quot;)]
  &amp;lt;/mx:Metadata&amp;gt;

  &amp;lt;mx:Script&amp;gt;
    &amp;lt;![CDATA[
      import flash.events.Event;
      import flash.events.EventDispatcher;
      import com.too_many_colours.events.DialogEvent;    		

      private function changeColour(event:MouseEvent):void{    			            	
        dispatchEvent(new DialogEvent( DialogEvent.CHANGE_COLOUR ));
      }
    ]]&amp;gt;
  &amp;lt;/mx:Script&amp;gt;

  &amp;lt;mx:Button label=&quot;Change Colour&quot; click=&quot;changeColour(event)&quot; /&amp;gt;

  &amp;lt;/mx:TitleWindow&amp;gt;
&lt;/pre&gt;
&lt;h3&gt;&lt;code&gt;application.mxml&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
  &amp;lt;mx:Application xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot; xmlns:comp=&quot;com.too_many_colours.components.*&quot;&amp;gt;
  	&amp;lt;mx:Script&amp;gt;
  		&amp;lt;![CDATA[  		  
  			import com.too_many_colours.components.Dialog;
        import mx.containers.TitleWindow;
        
        // import custom events
        import com.too_many_colours.events.DialogEvent;

  			private function changeColour(event:DialogEvent) : void {
  				debug(isChanged.toString())
  			}

  			private var dialogWindow:Dialog;
  			
  			private function showDialog():void {
  			  dialogWindow = Dialog(PopUpManager.createPopUp( this, Dialog , false));
  			  
  			  // add event listener
  				dialogWindow.addEventListener( DialogEvent.CHANGE_COLOUR, changeColour);					
        }
  		]]&amp;gt;
  	&amp;lt;/mx:Script&amp;gt;
  &amp;lt;/mx:Application&amp;gt;
&lt;/pre&gt;
&lt;h3&gt;&lt;code&gt;DialogEvent.as&lt;/code&gt;&lt;/h3&gt;
&lt;pre class=&quot;brush: as3;&quot;&gt;
  package com.too_many_colours.events{
  	import flash.events.Event;

  	public class DialogEvent extends Event{
  		public static const CHANGE_COLOUR:String = &quot;changeColour&quot;;

  		public function DialogEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false){
  			super(CHANGE_COLOUR, bubbles, cancelable);
  		}
  	}
  }
&lt;/pre&gt;
&lt;h2&gt;Passing a reference to the calling component.&lt;/h2&gt;
&lt;h3&gt;The main &lt;span class=&quot;caps&quot;&gt;MXML&lt;/span&gt; Document:&lt;/h3&gt;
&lt;pre class=&quot;brush: as3;&quot;&gt;
  [Bindable]
  public var currentElementId:String;
  
  private function onMouseUp(event:MouseEvent) : void {
		currentElementId = event.currentTarget.id		
		showDialog();
	}
  
  private function showDialog():void {
  	dialogWindow = Dialog(PopUpManager.createPopUp( this, Dialog , false));
  	dialogWindow.currentElementId = currentElementId; 
  }
&lt;/pre&gt;
&lt;h3&gt;The &lt;code&gt;dialogWindow&lt;/code&gt; Component.&lt;/h3&gt;
&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
  &amp;lt;mx:TitleWindow xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot; &amp;gt;
    &amp;lt;mx:Script&amp;gt;
      &amp;lt;![CDATA[
      [Bindable]
      public var currentElementId:String;
      ]]&amp;gt;
    &amp;lt;/mx:Script&amp;gt;
    &amp;lt;mx:Label text=&quot;{currentElementId}&quot; /&amp;gt;
  &amp;lt;/mx:TitleWindow&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://www.adobe.com/livedocs/flex/3/html/help.html?content=mxmlcomponents_advanced_3.html&quot;&gt;Passing a reference to the calling component&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Using the Repeater component to display elements from &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; object.&lt;/h2&gt;


&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
  &amp;lt;mx:TitleWindow xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot; &amp;gt;
    &amp;lt;mx:Script&amp;gt;
      &amp;lt;![CDATA[
      [Bindable]
			private var XMLBuendchenElements:XML = 
				&amp;lt;elements&amp;gt;
					&amp;lt;element&amp;gt;
						&amp;lt;pos-x&amp;gt;200&amp;lt;/pos-x&amp;gt;
						&amp;lt;pos-y&amp;gt;300&amp;lt;/pos-y&amp;gt;
						&amp;lt;name&amp;gt;body&amp;lt;/name&amp;gt;
						&amp;lt;source&amp;gt;/images/dummys/buendchen.png&amp;lt;/source&amp;gt;
						&amp;lt;scale-x&amp;gt;0.1&amp;lt;/scale-x&amp;gt;
						&amp;lt;scale-y&amp;gt;0.1&amp;lt;/scale-y&amp;gt;
					&amp;lt;/element&amp;gt;
					&amp;lt;element&amp;gt;
						&amp;lt;pos-x&amp;gt;200&amp;lt;/pos-x&amp;gt;
						&amp;lt;pos-y&amp;gt;300&amp;lt;/pos-y&amp;gt;
						&amp;lt;name&amp;gt;body&amp;lt;/name&amp;gt;
						&amp;lt;source&amp;gt;/images/dummys/buendchen-rot.png&amp;lt;/source&amp;gt;
						&amp;lt;scale-x&amp;gt;0.1&amp;lt;/scale-x&amp;gt;
						&amp;lt;scale-y&amp;gt;0.1&amp;lt;/scale-y&amp;gt;
					&amp;lt;/element&amp;gt;
				&amp;lt;/elements&amp;gt;;
      ]]&amp;gt;
    &amp;lt;/mx:Script&amp;gt;

    &amp;lt;mx:VBox&amp;gt;
    	&amp;lt;mx:Repeater id=&quot;rp&quot; dataProvider=&quot;{XMLBuendchenElements.element}&quot;&amp;gt;
    		&amp;lt;mx:Image click=&quot;changeColour(event)&quot; source=&quot;{String(rp.currentItem.source)}&quot; scaleX=&quot;{String(rp.currentItem.scale-x)}&quot; scaleY=&quot;{String(rp.currentItem.scale-y)}&quot;  /&amp;gt;    	
    	&amp;lt;/mx:Repeater&amp;gt;
    &amp;lt;/mx:VBox&amp;gt;
  &amp;lt;/mx:TitleWindow&amp;gt;
&lt;/pre&gt;
&lt;h2&gt;Passing request data with flashVars properties.&lt;/h2&gt;
&lt;p&gt;How can i communicate between javascript and my &lt;span class=&quot;caps&quot;&gt;FLEX&lt;/span&gt; app ?&lt;/p&gt;
&lt;p&gt;One solution it to pass flashvars within the swfobject creation.&lt;/p&gt;
&lt;h3&gt;The Javascript&lt;/h3&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  var flashvars = {
    category: 2,      
  };
  
  var params = false;    
  var attributes = false;

  var width = '936';
  var height = '400';

  swfobject.embedSWF('/flash/design_studio.swf', 'flash_design_studio', width, height, '9.0.0', '/flash/expressInstall.swf', flashvars, params, attributes);    
&lt;/pre&gt;
&lt;h3&gt;The Flex app:&lt;/h3&gt;
&lt;pre class=&quot;brush: xml;&quot;&gt;
  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
  &amp;lt;mx:Application 
  	xmlns:mx=&quot;http://www.adobe.com/2006/mxml&quot;
  	initialize=&quot;{init()}&quot;
  	viewSourceURL=&quot;srcview/index.html&quot;&amp;gt;
  	&amp;lt;mx:Script&amp;gt;
      &amp;lt;![CDATA[
        public var currentCategoryId:Number;
        private function init () : void {
        	// now you cann acces the flashvars:
        	currentCategoryId = Application.application.parameters.category;
        }
      ]]&amp;gt;
    &amp;lt;/mx:Script&amp;gt;
 &amp;lt;/mx:Application&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Thats it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are more possibility&amp;#8217;s to communicate between javascript and flex, but thats one of the basics examples.&lt;/p&gt;
&lt;h3&gt;Ressources&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://livedocs.adobe.com/flex/3/html/help.html?content=passingarguments_3.html&quot;&gt;livedocs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.powerflasher.de/swfobject2/&quot;&gt;swfobject2 docu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Create a custom Loader to load Images from an &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; list and add custom parameters (ex. ID of the image).&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Long Headline but short solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The CustomImageLoader extends the Loader and accepts an image as &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CustomImageLoader.as&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: as;&quot;&gt;
  package com.too_many_colours.loader{
  	import flash.display.Loader;

  	public class CustomImageLoader extends Loader {
  	    public var image:XML;

  	    public function CustomImageLoader(image:XML= null) {
  	            this.image = image;
  	    }
  	}
  }
&lt;/pre&gt;
&lt;p&gt;Now you can simply use the CustomImageLoader as followed:&lt;/p&gt;
&lt;pre class=&quot;brush: as;&quot;&gt;
  var loader: CustomImageLoader = new CustomImageLoader(image);
  loader.load(new URLRequest( '/assets/elements/' + String(image.id)  + '/' + String(image.asset_file_name)));
  loader.image = &quot;some xml data&quot;;
  loader.contentLoaderInfo.addEventListener(Event.COMPLETE, pngOnLoaded);
&lt;/pre&gt;
&lt;p&gt;And access the additional Parameters in the &lt;code&gt;handleImageLoaded&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;brush: as;&quot;&gt;
  private function handleImageLoaded(event:Event):void {
    // access the additional parameter:
  	var image:XML = (event.target.loader as CustomImageLoader).image;
  	
  	var element:Image = new Image();
  	element.id = image.id;
  	
  	// access the usual content
  	element.source = event.currentTarget.content				
  }
&lt;/pre&gt;
&lt;h3&gt;Ressources&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/762521/custom-as3-loader-class-that-uses-a-custom-loaderinfo-class&quot;&gt;stackoverflow 1&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/758322/how-do-i-modify-existing-as3-events-so-that-i-can-pass-data&quot;&gt;stackoverflow 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ROLL_OVER vs MOUSE_OVER&lt;/h2&gt;
&lt;p&gt;from &lt;a href=&quot;http://www.kirupa.com/forum/showthread.php?t=302169&quot;&gt;www.kirupa.com/forum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MOUSE_OVER will issue new rollover events for each child of a display object container containing multiple children. (ie: multiple buttons nested within a single container)&lt;/p&gt;
&lt;p&gt;ROLL_OVER will issue only a single rollover event, regardless of the presence of multiple children within a display object container.&lt;br /&gt;
This essentially bypasses the advantages/(or defects, depending on your construction methods) of AS3 event propagation.&lt;br /&gt;
This might be useful for mitigating UI construction issues, with regard to default AS3 display list behaviors, but will probably require separate listeners for each button instance.&lt;br /&gt;
ie: 30 buttons would require 30 event listeners.&lt;br /&gt;
As far as I can see, this is essentially just a &amp;#8220;kludge&amp;#8221; that causes AS3 to act more like AS2.&lt;/p&gt;
&lt;p&gt;For example:&lt;br /&gt;
Attaching a MOUSE_OVER event listener to &amp;#8220;buttonGroup&amp;#8221; will register new rollover events for each of the children of buttonGroup.&lt;br /&gt;
buttonGroup.addEventListener(MouseEvent.MOUSE_OVER , btnOver, false, 0, true);&lt;br /&gt;
//limit mouse events to children only, and enable hand-cursor&lt;br /&gt;
buttonGroup.mouseEnabled = false.&lt;br /&gt;
buttonGroup.buttonMode = true.&lt;br /&gt;
This allows a single listener to serve multiple nested children of the attached display object container.&lt;br /&gt;
ie: you construct your button movieclips; name the instances; wrap them in the &amp;#8220;buttonGroup&amp;#8221; container; attach a set of MOUSE_OVER/MOUSE_OUT/MOUSE_DOWN etc&amp;#8230; listeners to &amp;#8220;buttonGroup&amp;#8221;.&lt;br /&gt;
This is a good thing, and leverages AS3 event propagation to its fullest potential.&lt;/p&gt;
&lt;p&gt;With regard to the OP issue, the problem is rooted in your construction methods, &lt;span class=&quot;caps&quot;&gt;IMO&lt;/span&gt;.&lt;br /&gt;
Using a Tweening class for button over/out tweens is easier to implement and far more flexible.&lt;br /&gt;
TweenLite/TweenMax, Tweener, or the built-in Tween class can be utilized to dramatically simplify your project.&lt;br /&gt;
ie:function btnOver(evt:MouseEvent):void{&lt;br /&gt;
//tween class methods here.&lt;br /&gt;
}&lt;/p&gt;
&lt;h2&gt;loading externel swf&lt;/h2&gt;
&lt;p&gt;private function handleCategoryElemetsFindResult(event:ResultEvent):void{&lt;br /&gt;
  // loading an external swf&lt;br /&gt;
	var loader:SWFLoader = new SWFLoader();&lt;br /&gt;
	loader.addEventListener(Event.&lt;span class=&quot;caps&quot;&gt;COMPLETE&lt;/span&gt;, onSwfLoaded);&lt;br /&gt;
	loader.load(&amp;#8220;/flash/hoodie/body.swf&amp;#8221;);&lt;br /&gt;
	test_atelier.addChild(loader);&lt;br /&gt;
	loader.addEventListener(MouseEvent.&lt;span class=&quot;caps&quot;&gt;CLICK&lt;/span&gt;, swfOnclick);&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;private function swfOnclick(event:Event):void{&lt;br /&gt;
	new DebugMessage(&amp;#8216;asd&amp;#8217;);&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;private function onSwfLoaded(event:Event):void{&lt;/p&gt;
&lt;p&gt;test_atelier.addChild(event.currentTarget.content);&lt;br /&gt;
}&lt;/p&gt;
&lt;h2&gt;Simple draw example in flex&lt;/h2&gt;
&lt;p&gt;Important to note that you have to create an &lt;code&gt;UIComponent&lt;/code&gt; and add the Shape to it. Than you&lt;br /&gt;
can add it to the stage&amp;#8230;&lt;/p&gt;
&lt;pre class=&quot;brush: as;&quot;&gt;
  var materialColor:Shape = new Shape();				
  var uiComponent:UIComponent = new UIComponent();

  materialColor.graphics.clear();
  materialColor.graphics.beginFill(0x007AAB);
  materialColor.graphics.drawRoundRect(0, 0, 200, 200, 0, 0);
  materialColor.graphics.endFill();
  uiComponent.addChild(materialColor); 
  testatelier.addChild(uiComponent);
&lt;/pre&gt;
&lt;h2&gt;Complex Masking in flex&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;SVG&lt;/span&gt; ? nope, not working dynamicly !&lt;br /&gt;
http://www.adobe.com/devnet/flex/quickstart/embedding_assets/#EmbeddingSvgFiles&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;caps&quot;&gt;SWF&lt;/span&gt; ?&lt;br /&gt;
that works:&lt;br /&gt;
&lt;mx:Image x=&quot;0&quot; y=&quot;0&quot; mask=&quot;{swfMask}&quot; id=&quot;hody&quot; source=&quot;/assets/materials/9/main-body.jpg&quot;/&gt;&lt;br /&gt;
&lt;mx:Image x=&quot;0&quot; y=&quot;0&quot; id=&quot;swfMask&quot; source=&quot;/flash/hoodie/body.swf&quot;/&gt;&lt;/p&gt;
&lt;p&gt;dynamicly and with eventlistener to!&lt;/p&gt;
&lt;p&gt;// The jpg&lt;br /&gt;
var elementImage:Image = new Image();&lt;br /&gt;
elementImage.source = &amp;#8220;/assets/materials/9/main-body.jpg&amp;#8221;;&lt;br /&gt;
elementImage.cacheAsBitmap = true;&lt;/p&gt;
&lt;p&gt;// the mask&lt;br /&gt;
var elementImageMask:Image = new Image();&lt;br /&gt;
elementImageMask.source = &amp;#8220;/assets/elements/4/main-body-mask.png&amp;#8221;;&lt;br /&gt;
elementImageMask.cacheAsBitmap = true;&lt;br /&gt;
elementImage.mask = elementImageMask;&lt;/p&gt;
&lt;p&gt;addChild(elementImageMask);&lt;br /&gt;
addChild(elementImage);&lt;/p&gt;
&lt;p&gt;elementImage.addEventListener(MouseEvent.MOUSE_OVER, function(event:MouseEvent):void{&lt;br /&gt;
	var hittest = elementImage.mask.hitTestPoint(event.localX, event.localX, false);&lt;br /&gt;
	new DebugMessage(hittest.toString());					&lt;br /&gt;
});&lt;br /&gt;
elementImage.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;// The jpg&lt;br /&gt;
var elementImage:Image = new Image();&lt;br /&gt;
elementImage.source = &amp;#8220;/assets/materials/9/main-body.jpg&amp;#8221;;&lt;br /&gt;
elementImage.cacheAsBitmap = true;&lt;/p&gt;
&lt;p&gt;// the mask&lt;br /&gt;
var elementImageMask:SWFLoader = new SWFLoader()&lt;br /&gt;
elementImageMask.load(&amp;#8220;/assets/elements/4/main-body-mask.png&amp;#8221;);&lt;br /&gt;
elementImage.mask = elementImageMask;&lt;/p&gt;
&lt;p&gt;addChild(elementImageMask);&lt;br /&gt;
addChild(elementImage);&lt;/p&gt;
&lt;p&gt;elementImage.addEventListener(MouseEvent.MOUSE_OVER, function(event:MouseEvent):void{&lt;br /&gt;
var hittest = elementImage.mask.hitTestPoint(event.localX, event.localX, false);&lt;br /&gt;
new DebugMessage(hittest.toString());					&lt;br /&gt;
});&lt;br /&gt;
elementImage.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Google Gears Experiment</title>
   <link href="http://kallesaas.com/2009/08/14/google-gears-experiment.html"/>
   <updated>2009-08-14T00:00:00+02:00</updated>
   <id>http://kallesaas.com/2009/08/14/google-gears-experiment</id>
   <content type="html">&lt;p class=&quot;time-stamp&quot;&gt;14 &lt;span class=&quot;caps&quot;&gt;AUGUST&lt;/span&gt; 2009&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;/2009/08/14/google-gears-experiment.html&quot;&gt;Google Gears Experiment&lt;/a&gt;&lt;/h1&gt;
&lt;h2&gt;The Result can be found &lt;em&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/&quot;&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/h2&gt;
&lt;p&gt;You need to install &lt;a href=&quot;http://gears.google.com/&quot;&gt;Google-Gears&lt;/a&gt;. to use this software.&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;h3&gt;File Structure:&lt;/h3&gt;
&lt;ul class=&quot;folders&quot;&gt;
&lt;li&gt;
&lt;a href=&quot;http://kallesaas.com/google-gears/&quot; &gt;google-gears&lt;/a&gt;

&lt;ul class=&quot;files&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/index.html.txt&quot; &gt;index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul class=&quot;folders&quot;&gt;
&lt;li&gt;
&lt;a href=&quot;http://kallesaas.com/google-gears/stylesheets&quot; &gt;stylesheets&lt;/a&gt;
&lt;ul class=&quot;files&quot;&gt;
          &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/stylesheets/default.css&quot;&gt;default.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul class=&quot;folders&quot;&gt;
&lt;li&gt;
&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts&quot; &gt;javascripts&lt;/a&gt;
&lt;ul class=&quot;files&quot;&gt;
          &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/application.js&quot;&gt;application.js&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/gears_init.js&quot;&gt;gears_init.js&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/vocabulary_creator.js&quot;&gt;vocabulary_creator.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Code&lt;/h2&gt;
&lt;h3&gt;&lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can find the full code of the &lt;code&gt;index.html&lt;/code&gt; file &lt;a href=&quot;http://kallesaas.com/google-gears/index.html.txt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Important the correct javascript files:&lt;/p&gt;
&lt;pre class=&quot;brush: html;&quot;&gt;
  ...
  &amp;lt;head&amp;gt;
      &amp;lt;script src=&quot;http://www.google.com/jsapi&quot;&amp;gt;&amp;lt;/script&amp;gt;

      &amp;lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;
        google.load(&quot;jquery&quot;, &quot;1&quot;);
      &amp;lt;/script&amp;gt;

      &amp;lt;script src=&quot;javascripts/gears_init.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&quot;javascripts/vocabulary_creator.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&quot;javascripts/application.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;
      ...
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    ...
&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;m using the &lt;a href=&quot;http://code.google.com/intl/de-DE/apis/ajaxlibs/&quot;&gt;Google &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; Libraries &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; to import the JQuery Library.&lt;/p&gt;
&lt;p&gt;You can download the &lt;code&gt;gears_init.js&lt;/code&gt; &lt;a href=&quot;http://code.google.com/apis/gears/tools.html#gears_init&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Javascript&lt;/h3&gt;
&lt;p&gt;You can find the Javascript code &lt;a href=&quot;http://kallesaas.com/google-gears/javascripts/vocabulary_creator.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ok, lets get started!&lt;/p&gt;
&lt;p&gt;First, we create a Namespace and a Singleton that holds our Javascript code:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  if (!window.GG) {
    var GG = { };
  }

  GG.VocabularyCreator = (function () { 
    return {
      init: function () {
      }
    };
  })();  
&lt;/pre&gt;
&lt;p&gt;Now we can add some functionality.&lt;/p&gt;
&lt;p&gt;But wait, what do we actually need ?&lt;/p&gt;
&lt;p&gt;We want to:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Add word&amp;#8217;s and theire translation to a list.&lt;/li&gt;
	&lt;li&gt;Display the List.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, thats sounds not so complicated.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a look at the &lt;a href=&quot;http://code.google.com/intl/de-DE/apis/gears/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; for the &lt;a href=&quot;http://code.google.com/intl/de-DE/apis/gears/api_database.html&quot;&gt;Database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first example shows a bunch of JavaScript code:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  &amp;lt;script type=&quot;text/javascript&quot; src=&quot;gears_init.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
  var db = google.gears.factory.create('beta.database');
  db.open('database-test');
  db.execute('create table if not exists Test' +
             ' (Phrase text, Timestamp int)');
  db.execute('insert into Test values (?, ?)', ['Monkey!', new Date().getTime()]);
  var rs = db.execute('select * from Test order by Timestamp desc');

  while (rs.isValidRow()) {
    alert(rs.field(0) + '@' + rs.field(1));
    rs.next();
  }
  rs.close();
  &amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;With this code we can:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instantiate the Gears objects: ( see: http://tinyurl.com/nvdhuh )&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  var db = google.gears.factory.create(&amp;#8216;beta.database&amp;#8217;);&lt;br /&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open the Database to read and write:&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  db.open(&amp;#8216;database-test&amp;#8217;);&lt;br /&gt;
&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Execute &lt;em&gt;SQLite&lt;/em&gt;:&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  // Create a SQLite table:&lt;br /&gt;
  db.execute(&amp;#8216;create table if not exists Test&amp;#8217; +&lt;br /&gt;
             &amp;#8217; (Phrase text, Timestamp int)&amp;#8217;);&lt;/p&gt;
// Insert a value to the table:
db.execute(&amp;#8216;insert into Test values (?, ?)&amp;#8217;, [&amp;#8216;Monkey!&amp;#8217;, new Date().getTime()]);
&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read the content of the table:&lt;/strong&gt;&lt;br /&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;&lt;br /&gt;
  // Execute SQLite&lt;br /&gt;
  var rs = db.execute(&amp;#8216;select * from Test order by Timestamp desc&amp;#8217;);&lt;/p&gt;
// loop over each row:
while (rs.isValidRow()) {
alert(rs.field(0) + &amp;#8216;@&amp;#8217; + rs.field(1));
rs.next();
}

// close the database connection:
rs.close();
&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s almost all we need for our small app.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s implement those basics in our app.&lt;/p&gt;
&lt;p&gt;We call the private &lt;code&gt;_initDatabase&lt;/code&gt; function inside the &lt;code&gt;init()&lt;/code&gt; function &lt;br /&gt;
to setup the Database:&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;init()&lt;/code&gt; function.&lt;/h3&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  // init function:
  return {
    init: function () {
      _initDatabase();
    }
  };
&lt;/pre&gt;
&lt;h3&gt;The &lt;code&gt;_initDatabase()&lt;/code&gt; function.&lt;/h3&gt;
&lt;p&gt;More explanation can be found within the code:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
    ...
    
    // set class variable's:
    var db;
    var databaseIsCreated = false;
    
    var _initDatabase = function () {
      
      // Check if Gears is installed.
      if (window.google &amp;amp;&amp;amp; google.gears) {
        try {

          // Instantiate Gears objects.
          db = google.gears.factory.create('beta.database');

          // check if the Database is available
          if (db) {
            
            // open a database, see: http://tinyurl.com/l8z4gw
            db.open('Translations');
            
            // Create the Table: EnglishGerman.
            db.execute('create table if not exists EnglishGerman' + 
                          ' (English varchar(255), German varchar(255), Timestamp int)');

            databaseIsCreated = true;

            // Initialize the UI at startup.
            _displayTranslations();
          }

        } catch (ex) {
          console.log('Could not create database: ' + ex.message);
        }
      }
    };
    ...
  })();
&lt;/pre&gt;
&lt;p&gt;The structure of the table looks like:&lt;/p&gt;
&lt;table&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;span class=&quot;caps&quot;&gt;NAME&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; English &lt;/td&gt;
		&lt;td&gt; German &lt;/td&gt;
		&lt;td&gt; Timestamp &lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt; &lt;span class=&quot;caps&quot;&gt;TYPE&lt;/span&gt; &lt;/td&gt;
		&lt;td&gt; varchar(255) &lt;/td&gt;
		&lt;td&gt; varchar(255) &lt;/td&gt;
		&lt;td&gt; date &lt;/td&gt;
&lt;/table&gt;
&lt;p&gt;Now we have a full featured Gears Database in our hands, Horay!&lt;/p&gt;
&lt;p&gt;We can continue with adding content to the SQLLite Table. We do this by &lt;br /&gt;
observing (i use &lt;a href=&quot;http://jquery.com/&quot;&gt;JQuery&lt;/a&gt; ) the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; Form and add the value&amp;#8217;s of &lt;br /&gt;
the input field&amp;#8217;s to the database:&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;_addObserver()&lt;/code&gt; function.&lt;/h3&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  ...
  var _addObserver = function () {
    
    // Adding the Form Observer
    $('#addVocabularyForm').submit(function (event) {
      var $this = $(this);

      // Read the values of the input fields:
      var german = $this.find('#german').val();
      var english = $this.find('#english').val();
      
      try {
        // Insert the new item.
        var res = db.execute('insert into EnglishGerman values (?, ?, ?)', 
              [english, german, new Date().getTime() ] );

        // if the insertion was successfully, we can also add the entry to the HTML.
        if (res) {
          _addVocabularyToHtml(english, german);
        }
      } catch (exaption) {
        console.log('could not insert entry:' + exaption);
      }

      // Prevent the default action.
      event.preventDefault();
    })
  };
  ...
&lt;/pre&gt;
&lt;p&gt;There is not much more to do. You can have a look at the &lt;code&gt;_addVocabularyToHtml&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;brush: js;&quot;&gt;
  var Translations = function (english, german) {
    $('#vocabularys tbody').prepend(
      $('&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;' + english + '&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;' + german + '&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;')
    )    
  };
&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a really simple experiment for Gears. There are by far more complex possibility&amp;#8217;s to&lt;br /&gt;
use Google Gears. The best thing is to read the &lt;a href=&quot;http://code.google.com/apis/gears/design.html&quot;&gt;introduction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unfortunately Apple&amp;#8217;s IPhone does not support Gears. (Apple does not allow third party plugins for the safari browser)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading !&lt;/p&gt;</content>
 </entry>
 
 
</feed>